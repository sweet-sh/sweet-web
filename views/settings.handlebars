<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.25/moment-timezone-with-data-10-year-range.min.js" crossorigin="anonymous"></script>
<div id="homeBody" class="row justify-content-center">
    <div class="col-lg-8">
        <h3 class="page-header mx-2">Settings</h3>
        <form id="settingsForm" method="post" action="/updatesettings" class="pane">
            <h4>Basic settings</h4>
            <div class="form-group">
                <label for="timezone">Select your timezone (or the nearest equivalent):</label>
                <select name="timezone" id="timezone">
                    {{!-- the defaulted selected timezone for this section is chosen by javascript at the bottom of the page --}}
                	<option id="guessed-timezone" value="auto">...loading default timezone...</option>
                	<option value="-12:00">(GMT -12:00) Eniwetok, Kwajalein</option>
                	<option value="-11:00">(GMT -11:00) Midway Island, Samoa</option>
                	<option value="-10:00">(GMT -10:00) Hawaii</option>
                	<option value="-09:00">(GMT -9:00) Alaska</option>
                	<option value="-08:00">(GMT -8:00) Pacific Time (US &amp; Canada)</option>
                	<option value="-07:00">(GMT -7:00) Mountain Time (US &amp; Canada)</option>
                	<option value="-06:00">(GMT -6:00) Central Time (US &amp; Canada), Mexico City</option>
                	<option value="-05:00">(GMT -5:00) Eastern Time (US &amp; Canada), Bogota, Lima</option>
                	<option value="-04:00">(GMT -4:00) Atlantic Time (Canada), Caracas, La Paz</option>
                	<option value="-03:00">(GMT -3:00) Brazil, Buenos Aires, Georgetown</option>
                	<option value="-02:00">(GMT -2:00) Mid-Atlantic</option>
                	<option value="-01:00">(GMT -1:00) Azores, Cape Verde Islands</option>
                	<option value="+00:00">(GMT) Western Europe Time, London, Lisbon, Casablanca</option>
                	<option value="+01:00">(GMT +1:00) Amsterdam, Brussels, Copenhagen, Madrid, Paris</option>
                	<option value="+02:00">(GMT +2:00) Kaliningrad, South Africa</option>
                	<option value="+03:00">(GMT +3:00) Baghdad, Riyadh, Moscow, St. Petersburg</option>
                	<option value="+04:00">(GMT +4:00) Abu Dhabi, Muscat, Baku, Tbilisi</option>
                	<option value="+05:00">(GMT +5:00) Ekaterinburg, Islamabad, Karachi, Tashkent</option>
                	<option value="+06:00">(GMT +6:00) Almaty, Dhaka, Colombo</option>
                	<option value="+07:00">(GMT +7:00) Bangkok, Hanoi, Jakarta</option>
                	<option value="+08:00">(GMT +8:00) Beijing, Perth, Singapore, Hong Kong</option>
                	<option value="+09:00">(GMT +9:00) Tokyo, Seoul, Osaka, Sapporo, Yakutsk</option>
                	<option value="+10:00">(GMT +10:00) Eastern Australia, Guam, Vladivostok</option>
                	<option value="+11:00">(GMT +11:00) Magadan, Solomon Islands, New Caledonia</option>
                	<option value="+12:00">(GMT +12:00) Auckland, Wellington, Fiji, Kamchatka</option>
                	<option value="+13:00">(GMT +13:00) Apia, Nukualofa</option>
                	<option value="+14:00">(GMT +14:00) Line Islands, Tokelau</option>
                </select>
                <p class="form-text small">This is currently only used for sending you your digest emails at the correct time. Picking a non-default one will result in us not really knowing your whole daylight savings time deal.</p>
            </div>
            <hr />
            <h4>Privacy</h4>
            <div class="form-group">
                <label for="profileVisibility">Profile page and public posts visibility</label>
                <select name="profileVisibility" id="profileVisibility">
                    <option value="invisible" {{#eq loggedInUserData.settings.profileVisibility "invisible"}}selected{{/eq}}>Visible to logged in users only</option>
                    <option value="profileOnly" {{#eq loggedInUserData.settings.profileVisibility "profileOnly"}}selected{{/eq}}>Profile visible to logged out users</option>
                    <option value="profileAndPosts" {{#eq loggedInUserData.settings.profileVisibility "profileAndPosts"}}selected{{/eq}}>Profile and public posts visible to logged out users</option>
                </select>
            </div>
            <hr />
            <h4 id="email_settings">Emails</h4>
            <div class="form-group">
                    <div class="form-check">
                            <input type="checkbox" name="sendMentionEmails" id="sendMentionEmails" {{#if loggedInUserData.settings.sendMentionEmails}}checked{{/if}}>
                            <label class="form-check-label" for="sendMentionEmails">
                                    Receive an email when someone mentions you
                            </label>
                    </div>
            </div>
            <div class="form-group">
                <label for="profileVisibility">Frequency of digest emails</label>
                <p class="form-text small mt-0">sweet can send you a daily or weekly digest email with a summary of your unseen notifications.</p>
                <select name="digestEmailFrequency" id="digestEmailFrequency">
                    <option value="off" {{#eq loggedInUserData.settings.digestEmailFrequency "off"}}selected{{/eq}}>Do not send digest emails</option>
                    <option value="daily" {{#eq loggedInUserData.settings.digestEmailFrequency "daily"}}selected{{/eq}}>Send a daily digest email</option>
                    <option value="weekly" {{#eq loggedInUserData.settings.digestEmailFrequency "weekly"}}selected{{/eq}}>Send a weekly digest email</option>
                </select>
                <div id="timeSelection" {{#eq loggedInUserData.settings.digestEmailFrequency "off"}}style="display:none;"{{/eq}}>
                    <p id="emailTimePrompt" class="form-text small mt-0">here, you can choose the time at which you would like to receive them:</p>
                    <select name="emailDay" id="emailDaySelect" {{#eq loggedInUserData.settings.digestEmailFrequency "weekly"}}{{else}}style="display:none;"{{/eq}}>
                        <option value="Sunday" {{#eq loggedInUserData.settings.emailDay "Sunday"}}selected{{/eq}}>Sunday</option>
                        <option value="Monday" {{#eq loggedInUserData.settings.emailDay "Monday"}}selected{{/eq}}>Monday</option>
                        <option value="Tuesday" {{#eq loggedInUserData.settings.emailDay "Tuesday"}}selected{{/eq}}>Tuesday</option>
                        <option value="Wednesday" {{#eq loggedInUserData.settings.emailDay "Wednesday"}}selected{{/eq}}>Wednesday</option>
                        <option value="Thursday" {{#eq loggedInUserData.settings.emailDay "Thursday"}}selected{{/eq}}>Thursday</option>
                        <option value="Friday" {{#eq loggedInUserData.settings.emailDay "Friday"}}selected{{/eq}}>Friday</option>
                        <option value="Saturday" {{#eq loggedInUserData.settings.emailDay "Saturday"}}selected{{/eq}}>Saturday</option>
                    </select>
                    <input name="emailTime" type="time" id="emailTime" value="{{loggedInUserData.settings.emailTime}}" required>
                    <select id="emailTimeSelect" style="display:none;">
                        {{!-- the idea here is that the user's current option is in the top - it can't definitely be integrated into the rest of the list --}}
                        {{!-- because it might have a custom minutes value - but then if it is one of the options below we hide its duplicate for neatness. --}}
                        <option value="{{loggedInUserData.settings.emailTime}}" id="currentEmailTime" selected>{{loggedInUserData.settings.emailTime}}</option>
                        {{#eq loggedInUserData.settings.emailTime "01:00"}}{{else}}<option value="01:00">01:00 am</option>{{/eq}}
                        {{#eq loggedInUserData.settings.emailTime "02:00"}}{{else}}<option value="02:00">02:00 am</option>{{/eq}}
                        {{#eq loggedInUserData.settings.emailTime "03:00"}}{{else}}<option value="03:00">03:00 am</option>{{/eq}}
                        {{#eq loggedInUserData.settings.emailTime "04:00"}}{{else}}<option value="04:00">04:00 am</option>{{/eq}}
                        {{#eq loggedInUserData.settings.emailTime "05:00"}}{{else}}<option value="05:00">05:00 am</option>{{/eq}}
                        {{#eq loggedInUserData.settings.emailTime "06:00"}}{{else}}<option value="06:00">06:00 am</option>{{/eq}}
                        {{#eq loggedInUserData.settings.emailTime "07:00"}}{{else}}<option value="07:00">07:00 am</option>{{/eq}}
                        {{#eq loggedInUserData.settings.emailTime "08:00"}}{{else}}<option value="08:00">08:00 am</option>{{/eq}}
                        {{#eq loggedInUserData.settings.emailTime "09:00"}}{{else}}<option value="09:00">09:00 am</option>{{/eq}}
                        {{#eq loggedInUserData.settings.emailTime "10:00"}}{{else}}<option value="10:00">10:00 am</option>{{/eq}}
                        {{#eq loggedInUserData.settings.emailTime "11:00"}}{{else}}<option value="11:00">11:00 am</option>{{/eq}}
                        {{#eq loggedInUserData.settings.emailTime "12:00"}}{{else}}<option value="12:00">12:00 pm</option>{{/eq}}
                        {{#eq loggedInUserData.settings.emailTime "13:00"}}{{else}}<option value="13:00">01:00 pm</option>{{/eq}}
                        {{#eq loggedInUserData.settings.emailTime "14:00"}}{{else}}<option value="14:00">02:00 pm</option>{{/eq}}
                        {{#eq loggedInUserData.settings.emailTime "15:00"}}{{else}}<option value="15:00">03:00 pm</option>{{/eq}}
                        {{#eq loggedInUserData.settings.emailTime "16:00"}}{{else}}<option value="16:00">04:00 pm</option>{{/eq}}
                        {{#eq loggedInUserData.settings.emailTime "17:00"}}{{else}}<option value="17:00">05:00 pm</option>{{/eq}}
                        {{#eq loggedInUserData.settings.emailTime "18:00"}}{{else}}<option value="18:00">06:00 pm</option>{{/eq}}
                        {{#eq loggedInUserData.settings.emailTime "19:00"}}{{else}}<option value="19:00">07:00 pm</option>{{/eq}}
                        {{#eq loggedInUserData.settings.emailTime "20:00"}}{{else}}<option value="20:00">08:00 pm</option>{{/eq}}
                        {{#eq loggedInUserData.settings.emailTime "21:00"}}{{else}}<option value="21:00">09:00 pm</option>{{/eq}}
                        {{#eq loggedInUserData.settings.emailTime "22:00"}}{{else}}<option value="22:00">10:00 pm</option>{{/eq}}
                        {{#eq loggedInUserData.settings.emailTime "23:00"}}{{else}}<option value="23:00">11:00 pm</option>{{/eq}}
                        {{#eq loggedInUserData.settings.emailTime "00:00"}}{{else}}<option value="00:00">12:00 am</option>{{/eq}}
                    </select>
                </div>
                <p class="small text-warning">If enabling emails, make sure to add <strong>updates@sweet.sh</strong> to your address book or trusted senders, especially if you use Gmail.</p>
            </div>
            <hr />
            <h4>Posting</h4>
            <div class="form-group">
                <label for="newPostPrivacy">Default privacy for new posts</label>
                <select name="newPostPrivacy" id="newPostPrivacy">
                    <option value="public" {{#eq loggedInUserData.settings.newPostPrivacy "public"}}selected{{/eq}}>Public</option>
                    <option value="private" {{#eq loggedInUserData.settings.newPostPrivacy "private"}}selected{{/eq}}>Private</option>
                </select>
            </div>
            <div class="form-group">
                <label for="newPostPrivacy">Quality of uploaded images</label>
                <select name="imageQuality" id="imageQuality">
                    <option value="standard" {{#eq loggedInUserData.settings.imageQuality "standard"}}selected{{/eq}}>Standard (up to 1200px standard quality JPGs)</option>
                    <option value="high" {{#eq loggedInUserData.settings.imageQuality "high"}}selected{{/eq}}>High (up to 2048px high quality JPGs/PNGs)</option>
                    <option value="ridiculous" {{#eq loggedInUserData.settings.imageQuality "ridiculous"}}selected{{/eq}}>Ridiculous (up to 4096px high quality JPGs/PNGs)</option>
                </select>
                <p class="form-text small">GIFs are always uploaded in their original quality. If you upload a large number of high quality images, we may ask you in future to help out with sweet's web hosting costs.</p>
            </div>
            <hr />
            <h4>Viewing</h4>
            <div class="form-group">
                <label for="homeTagTimelineSorting">Sorting of posts in Home and Tag timelines</label>
                <select name="homeTagTimelineSorting" id="homeTagTimelineSorting">
                    <option value="chronological" {{#eq loggedInUserData.settings.homeTagTimelineSorting "chronological"}}selected{{/eq}}>Chronological (the time they were originally posted)</option>
                    <option value="fluid" {{#eq loggedInUserData.settings.homeTagTimelineSorting "fluid"}}selected{{/eq}}>Fluid (recently commented and boosted posts move to the top)</option>
                </select>
            </div>
            <div class="form-group">
                <label for="userTimelineSorting">Sorting of posts in User timelines</label>
                <select name="userTimelineSorting" id="userTimelineSorting">
                    <option value="chronological" {{#eq loggedInUserData.settings.userTimelineSorting "chronological"}}selected{{/eq}}>Chronological (the time they were originally posted)</option>
                    <option value="fluid" {{#eq loggedInUserData.settings.userTimelineSorting "fluid"}}selected{{/eq}}>Fluid (recently commented and boosted posts move to the top)</option>
                </select>
            </div>
            <div class="form-group">
                <label for="communityTimelineSorting">Sorting of posts in Community timelines</label>
                <select name="communityTimelineSorting" id="communityTimelineSorting">
                    <option value="chronological" {{#eq loggedInUserData.settings.communityTimelineSorting "chronological"}}selected{{/eq}}>Chronological (the time they were originally posted)</option>
                    <option value="fluid" {{#eq loggedInUserData.settings.communityTimelineSorting "fluid"}}selected{{/eq}}>Fluid (recently commented and boosted posts move to the top)</option>
                </select>
            </div>
            <div class="form-group">
                <input type="checkbox" name="flashRecentComments" id="flashRecentComments" {{#if loggedInUserData.settings.flashRecentComments}}checked{{/if}}>
                <label class="form-check-label" for="flashRecentComments">
                        Flash recent comments
                </label>
            </div>
            <div class="pushNotifSubStuff" style="margin:20px 0;">
                <button style="white-space:normal;" type="button" id="notifs-button" class="button lowercase-button">Click to subscribe this browser to sweet push notifications!</button>
                <p class="form-text small">On desktop you'll get notifications while this browser is open, on Android devices just like any other social media app, and on Apple devices probably nothing because we haven't gone through their approval process yet, sorry.</p>
            </div>
            <input name="autoDetectedTimeZone" type="hidden" id="submitDetectedTimeZone" value="{{loggedInUserData.settings.autoDetectedTimeZone}}">
            <hr />
            <h4 id="discovery-settings">Discovery</h4>
            <div class="form-group">
                <input type="checkbox" name="showRecommendations" id="showRecommendations" {{#if loggedInUserData.settings.showRecommendations}}checked{{/if}}>
                <label class="form-check-label" for="showRecommendations">
                        Show recommended people and communities next to the home feed
                </label>
            </div>
            <div class="form-group">
                <input type="checkbox" name="showHashtags" id="showHashtags" {{#if loggedInUserData.settings.showHashtags}}checked{{/if}}>
                <label class="form-check-label" for="showHashtags">
                        Show recent hashtags next to the home feed
                </label>
            </div>
            <button type="submit" class="button">Save settings</button>
        </form>
    </div>
</div>
<script>
    //ok so this detects the user's time zone and if it's changed and creates options in the drop-down for time zones based on that
    function stringifyTZ(tz){
        //just to make moment's time zone strings more human-readable
        return tz.replace(new RegExp('_', 'g'), ' ').replace(new RegExp('/', 'g'), ', ');
    }

    var autoDetectedTimeZone = moment.tz.guess();
    var autoDetectedTimeZoneString = stringifyTZ(autoDetectedTimeZone);
    var lastKnownTimeZone = "{{loggedInUserData.settings.autoDetectedTimeZone}}";

    if("" === lastKnownTimeZone){
        //if it's not yet saved, we need to put it in the form so it becomes saved upon submission
        $("#submitDetectedTimeZone").val(autoDetectedTimeZone);
    }

    if("" === lastKnownTimeZone || autoDetectedTimeZone === lastKnownTimeZone){
        //if auto-detected time zone is not yet saved (like, it will be on submission though) or is being used currently, it's just the default option
        $("#guessed-timezone")[0].innerHTML = 'Default (for you): '+autoDetectedTimeZoneString;

    }else if(autoDetectedTimeZone !== lastKnownTimeZone){
        //if auto-detected time zone was saved but is now different, offer them the new one as the second option, and change their auto-detected time zone if they choose it
        var lastKnownTimeZoneString = stringifyTZ(lastKnownTimeZone);
        $("#guessed-timezone")[0].innerHTML = "Last known default (for you): "+lastKnownTimeZoneString;
        $("#guessed-timezone").after('<option value="auto" id="newDefault">'+'Brand new default (for you): '+autoDetectedTimeZoneString+'</option>');
        $('#settingsForm').submit(function(event){
            if($("#newDefault")[0].selected){
                $("#submitDetectedTimeZone").val(autoDetectedTimeZone);
            }
            return true;
        })
    }

    //email time choosing stuff:
    //show/hide time selection based on whether the user wants to get emails at all:
    $("#digestEmailFrequency").change(function(event){
        if($(this).val()=="off"){
            $('#timeSelection').css('display','none');
        }else{
            $('#timeSelection').css('display','block');
            if($(this).val()=="weekly"){
                $("#emailDaySelect").css('display','inline');
            }else{
                $("#emailDaySelect").css('display','none');
            }
        }
    })

    {{!-- if the user isn't using their timezone, select auto for them, otherwise select the timezone they have currently selected --}}
    {{#eq loggedInUserData.settings.digestEmailFrequency 'off'}}
    $('#timezone').find('[value="auto"]').prop('selected',true);
    {{else}}
    $('#timezone').find('[value="{{loggedInUserData.settings.timezone}}"]').prop('selected',true);
    {{/eq}}

    //format the user's currently chosen email time so it's not in 24-hour format like how it's stored in the database:
    var day = moment().tz('GMT'); //we need an arbitrary day to accompany the time when creating the moment object that will give us our formatted output
    var splitTime = $('#currentEmailTime').html().split(/:/);
    day.hours(splitTime[0]).minutes(splitTime[1]).seconds(0).milliseconds(0);
    $('#currentEmailTime').html(day.format('LT'));

    //safari (and some really old browsers) turn time inputs into text inputs for no reason, so we'll use the <select> instead in that case
    if($("#emailTime")[0].type == "text"){
        $("#emailTime").css('display','none');
        $("#emailTime").attr('name','UNUSED');
        $("#emailTime").prop('required',false);
        $("#emailTimeSelect").prop('required',true); //not sure how you would leave this empty but just in case!
        $("#emailTimeSelect").css('display','block');
        $("#emailTimeSelect").attr('name','emailTime');
    }

    //push notification code largely taken from https://developers.google.com/web/fundamentals/codelabs/push-notifications/
    var isSubscribed = false;
    var pushButton = $('#notifs-button');
    if ('serviceWorker' in navigator && 'PushManager' in window) {
        console.log('Service Worker and Push are supported');
        //service worker is like a mini program that contains some code that responds to events no matter what page the user is on.
        //the below line will only have an effect the first time it is run, after that it will be already registered
        navigator.serviceWorker.register('/js/sw.js')
            .then(function (swReg) {
                swRegistration = swReg; //store the registration in a global variable for future use
                swRegistration.pushManager.getSubscription().then(function (subscription) {
                    isSubscribed = !(subscription === null);
                    if (isSubscribed) {
                        console.log('User IS subscribed.');
                    } else {
                        console.log('User is NOT subscribed.');
                    }
                    updateButtonDisplay();
                });
            })
            .catch(function (error) {
                console.error('Service Worker Error', error);
            });

        pushButton.click(function (e) {
            pushButton[0].disabled = true; //so it can't be clicked again right away and double-send subscription info to server
            if (Notification.permission == "denied") {
                bootbox.alert("You have notification permissions turned off for this site! To change this, click the button with the letter 'i' on it on the left side of the address bar and look for the word 'notifications' in the menu that shows up.");
                updateButtonDisplay();
            } else if (isSubscribed) {
                //if the user is subscribed they're clicking on the button in order to unsubscribe
                unsubscribeUser()
            } else {
                //if the user is not subscribed they're clicking on the button in order to subscribe
                subscribeUser()
            }
        })

    } else {
        console.warn('Push messaging is not supported');
        $('.pushNotifSubStuff').css('display','none');
    }

    function subscribeUser(){
        const applicationServerKey = urlBase64ToUint8Array("{{this.notifierPublicKey}}");
        swRegistration.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey: applicationServerKey
        }).then(function (subscription) {
            console.log('User was just subscribed');
            $.post("/pushnotifs/subscribe", {
                subscription: JSON.stringify(subscription)
            })
            isSubscribed = true;
            updateButtonDisplay()
        }).catch(function (err) {
            console.log('Failed to subscribe the user: ', err);
            updateButtonDisplay()
        });
    }

    function unsubscribeUser() {
        swRegistration.pushManager.getSubscription()
            .then(function(subscription) {
                if (subscription) {
                    subscription.unsubscribe()
                        .catch(function(error) {
                            console.log('Error unsubscribing', error);
                        })
                        .then(function() {
                            $.post("/pushnotifs/unsubscribe", {
                                subscription: JSON.stringify(subscription)
                            })
                            console.log('User is unsubscribed.');
                            isSubscribed = false;
                            updateButtonDisplay();
                        });
                }
            })
    }

    //call this whenever the subscription state changes
    function updateButtonDisplay() {
        if(Notification.permission == "denied"){ //this isn't actually about updating the button but this is a convenient place to check permissions, we can't predict when the user will change them so we want to check this whenever it might be relevant
            isSubscribed = false;
            //unsubscribe the user so that the server doesn't waste time trying to send them stuff
            unsubscribeUser();
            pushButton.html('Click to subscribe this browser to sweet push notifications!');
        }else if (isSubscribed) {
            pushButton.html('Click to unsubscribe this browser from sweet push notifications!');
        } else {
            pushButton.html('Click to subscribe this browser to sweet push notifications!');
        }
        pushButton[0].disabled = false;
    }

    function urlBase64ToUint8Array(base64String) {
        const padding = '='.repeat((4 - base64String.length % 4) % 4);
        const base64 = (base64String + padding)
            .replace(/-/g, '+')
            .replace(/_/g, '/');

        const rawData = window.atob(base64);
        const outputArray = new Uint8Array(rawData.length);

        for (let i = 0; i < rawData.length; ++i) {
            outputArray[i] = rawData.charCodeAt(i);
        }
        return outputArray;
    }
</script>
