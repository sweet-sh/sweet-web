<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js" crossorigin="anonymous"></script>
<script
    src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.25/moment-timezone-with-data-10-year-range.min.js"
    crossorigin="anonymous"></script>
<form id="settingsForm" class="row justify-content-center" method="post" action="/updatesettings">
    <div class="col-md-8">
        <div class="pane">
            <h3 class="page-header mx-2">Settings</h3>
            <h4>Privacy</h4>
            <div class="form-group">
                <label for="profileVisibility">Profile page and public posts visibility</label>
                <select name="profileVisibility" id="profileVisibility">
                    <option value="invisible"
                        {{#eq loggedInUserData.settings.profileVisibility "invisible"}}selected{{/eq}}>Visible to logged
                        in users only</option>
                    <option value="profileOnly"
                        {{#eq loggedInUserData.settings.profileVisibility "profileOnly"}}selected{{/eq}}>Profile visible
                        to logged out users</option>
                    <option value="profileAndPosts"
                        {{#eq loggedInUserData.settings.profileVisibility "profileAndPosts"}}selected{{/eq}}>Profile and
                        public posts visible to logged out users</option>
                </select>
            </div>
            <hr />
            <h4>Posting</h4>
            <div class="form-group">
                <label for="newPostPrivacy">Default privacy for new posts</label>
                <select name="newPostPrivacy" id="newPostPrivacy">
                    <option value="public" {{#eq loggedInUserData.settings.newPostPrivacy "public"}}selected{{/eq}}>
                        Public</option>
                    <option value="private" {{#eq loggedInUserData.settings.newPostPrivacy "private"}}selected{{/eq}}>
                        Private</option>
                </select>
            </div>
            <div class="form-group">
                <label for="newPostPrivacy">Quality of uploaded images</label>
                <select name="imageQuality" id="imageQuality">
                    <option value="standard" {{#eq loggedInUserData.settings.imageQuality "standard"}}selected{{/eq}}>
                        Standard (up to 1200px standard quality JPGs)</option>
                    <option value="high" {{#eq loggedInUserData.settings.imageQuality "high"}}selected{{/eq}}>High (up
                        to 2048px high quality JPGs/PNGs)</option>
                    <option value="ridiculous"
                        {{#eq loggedInUserData.settings.imageQuality "ridiculous"}}selected{{/eq}}>Ridiculous (up to
                        4096px high quality JPGs/PNGs)</option>
                </select>
                <p class="form-text small">GIFs are always uploaded in their original quality. If you upload a large
                    number of high quality images, we may ask you in future to help out with sweet's web hosting costs.
                </p>
            </div>
            <hr />
            <h4>Viewing</h4>
            <div class="form-group">
                <label for="theme">Theme</label>
                <select name="theme" id="theme">
                    <option value="light" {{#eq loggedInUserData.settings.theme "light"}}selected{{/eq}}>Light</option>
                    <option value="dark" {{#eq loggedInUserData.settings.theme "dark"}}selected{{/eq}}>Dark</option>
                </select>
            </div>
            <div class="form-group">
                <label for="homeTagTimelineSorting">Sorting of posts in Home and Tag timelines</label>
                <select name="homeTagTimelineSorting" id="homeTagTimelineSorting">
                    <option value="chronological"
                        {{#eq loggedInUserData.settings.homeTagTimelineSorting "chronological"}}selected{{/eq}}>
                        Chronological (the time they were originally posted)</option>
                    <option value="fluid"
                        {{#eq loggedInUserData.settings.homeTagTimelineSorting "fluid"}}selected{{/eq}}>Fluid (recently
                        commented and boosted posts move to the top)</option>
                </select>
            </div>
            <div class="form-group">
                <label for="userTimelineSorting">Sorting of posts in User timelines</label>
                <select name="userTimelineSorting" id="userTimelineSorting">
                    <option value="chronological"
                        {{#eq loggedInUserData.settings.userTimelineSorting "chronological"}}selected{{/eq}}>
                        Chronological (the time they were originally posted)</option>
                    <option value="fluid" {{#eq loggedInUserData.settings.userTimelineSorting "fluid"}}selected{{/eq}}>
                        Fluid (recently commented and boosted posts move to the top)</option>
                </select>
            </div>
            <div class="form-group">
                <label for="communityTimelineSorting">Sorting of posts in Community timelines</label>
                <select name="communityTimelineSorting" id="communityTimelineSorting">
                    <option value="chronological"
                        {{#eq loggedInUserData.settings.communityTimelineSorting "chronological"}}selected{{/eq}}>
                        Chronological (the time they were originally posted)</option>
                    <option value="fluid"
                        {{#eq loggedInUserData.settings.communityTimelineSorting "fluid"}}selected{{/eq}}>Fluid
                        (recently commented and boosted posts move to the top)</option>
                </select>
            </div>
            <div class="form-group">
                <input type="checkbox" name="flashRecentComments" id="flashRecentComments"
                    {{#if loggedInUserData.settings.flashRecentComments}}checked{{/if}}>
                <label class="form-check-label" for="flashRecentComments">
                    Flash recent comments
                </label>
            </div>
            <input name="autoDetectedTimeZone" type="hidden" id="submitDetectedTimeZone"
                value="{{loggedInUserData.settings.autoDetectedTimeZone}}">
            <hr />
            <h4 id="discovery-settings">Discovery</h4>
            <div class="form-group">
                <input type="checkbox" name="showRecommendations" id="showRecommendations"
                    {{#if loggedInUserData.settings.showRecommendations}}checked{{/if}}>
                <label class="form-check-label" for="showRecommendations">
                    Show recommended people and communities next to the home feed
                </label>
            </div>
            <div class="form-group">
                <input type="checkbox" name="showHashtags" id="showHashtags"
                    {{#if loggedInUserData.settings.showHashtags}}checked{{/if}}>
                <label class="form-check-label" for="showHashtags">
                    Show recent hashtags next to the home feed
                </label>
            </div>
            <hr />
            <h4>Notifications</h4>
            <div class="form-group pushNotifSubStuff">
                <button style="white-space:normal;" type="button" id="notifs-button"
                    class="button lowercase-button">Click to subscribe this browser to Sweet push
                    notifications!</button>
                <p class="form-text small" style="margin-top: .5rem">On desktop you'll get notifications while this
                    browser is open, on Android devices just like any other social media app, and on Apple devices
                    probably nothing because we haven't gone through their approval process yet, sorry.</p>
            </div>
            <div class="message">
                <h4>Danger zone!</h4>
                <button type="button" class="button delete-user">Delete my Sweet account</button>
                <p class="form-text mt-2">Clicking this button will delete your Sweet user account and all your data,
                    including your posts, comments, boosts, subscriptions, uploaded images, community memberships,
                    votes, and relationships. This process is immediate and permanent. You will <strong>not</strong> be
                    able to undo it.</p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="pane">
            <button type="submit" class="button">Save these settings</button>
        </div>
    </div>
</form>
<script>
    //push notification code largely taken from https://developers.google.com/web/fundamentals/codelabs/push-notifications/
    var isSubscribed = false;
    var pushButton = $('#notifs-button');
    if ('serviceWorker' in navigator && 'PushManager' in window) {
        console.log('Service Worker and Push are supported');
        //service worker is like a mini program that contains some code that responds to events no matter what page the user is on.
        //the below line will only have an effect the first time it is run, after that it will be already registered
        navigator.serviceWorker.register('/js/sw.js')
            .then(function (swReg) {
                swReg.update();
                swRegistration = swReg; //store the registration in a global variable for future use
                swRegistration.pushManager.getSubscription().then(function (subscription) {
                    isSubscribed = !(subscription === null);
                    if (isSubscribed) {
                        console.log('User IS subscribed.');
                    } else {
                        console.log('User is NOT subscribed.');
                    }
                    updateButtonDisplay();
                });
            })
            .catch(function (error) {
                console.error('Service Worker Error', error);
            });

        pushButton.click(function (e) {
            pushButton[0].disabled = true; //so it can't be clicked again right away and double-send subscription info to server
            if (Notification.permission == "denied") {
                bootbox.alert("You have notification permissions turned off for this site! To change this, click the button with the letter 'i' on it on the left side of the address bar and look for the word 'notifications' in the menu that shows up.");
                updateButtonDisplay();
            } else if (isSubscribed) {
                //if the user is subscribed they're clicking on the button in order to unsubscribe
                unsubscribeUser()
            } else {
                //if the user is not subscribed they're clicking on the button in order to subscribe
                subscribeUser()
            }
        })

    } else {
        console.warn('Push messaging is not supported');
        $('.pushNotifSubStuff').css('display', 'none');
    }

    function subscribeUser() {
        const applicationServerKey = urlBase64ToUint8Array("{{this.notifierPublicKey}}");
        swRegistration.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey: applicationServerKey
        }).then(function (subscription) {
            console.log('User was just subscribed');
            $.post("/pushnotifs/subscribe", {
                subscription: JSON.stringify(subscription)
            })
            isSubscribed = true;
            updateButtonDisplay()
        }).catch(function (err) {
            console.log('Failed to subscribe the user: ', err);
            updateButtonDisplay()
        });
    }

    function unsubscribeUser() {
        swRegistration.pushManager.getSubscription()
            .then(function (subscription) {
                if (subscription) {
                    subscription.unsubscribe()
                        .catch(function (error) {
                            console.log('Error unsubscribing', error);
                        })
                        .then(function () {
                            $.post("/pushnotifs/unsubscribe", {
                                subscription: JSON.stringify(subscription)
                            })
                            console.log('User is unsubscribed.');
                            isSubscribed = false;
                            updateButtonDisplay();
                        });
                }
            })
    }

    //call this whenever the subscription state changes
    function updateButtonDisplay() {
        if (Notification.permission == "denied") { //this isn't actually about updating the button but this is a convenient place to check permissions, we can't predict when the user will change them so we want to check this whenever it might be relevant
            isSubscribed = false;
            //unsubscribe the user so that the server doesn't waste time trying to send them stuff
            unsubscribeUser();
            pushButton.html('Click to subscribe this browser to Sweet push notifications!');
        } else if (isSubscribed) {
            pushButton.html('Click to unsubscribe this browser from Sweet push notifications!');
        } else {
            pushButton.html('Click to subscribe this browser to Sweet push notifications!');
        }
        pushButton[0].disabled = false;
    }

    function urlBase64ToUint8Array(base64String) {
        const padding = '='.repeat((4 - base64String.length % 4) % 4);
        const base64 = (base64String + padding)
            .replace(/-/g, '+')
            .replace(/_/g, '/');

        const rawData = window.atob(base64);
        const outputArray = new Uint8Array(rawData.length);

        for (let i = 0; i < rawData.length; ++i) {
            outputArray[i] = rawData.charCodeAt(i);
        }
        return outputArray;
    }

    $('.delete-user').click(function () {
        bootbox.confirm('You are about to delete your Sweet user account and all your data, including your posts, comments, boosts, subscriptions, uploaded images, community memberships, votes, and relationships. This process is immediate and permanent. You will not be able to undo it. Would you like to proceed?', function (result) {
            if (result === true) {
                $.ajax({
                    url: 'http://localhost:8787/api/user',
                    type: 'DELETE',
                    headers: {
                        'Authorization': localStorage.getItem('JWT')
                    },
                    success: function (response) {
                        console.log(response);
                        localStorage.removeItem('JWT');
                        location.href = '/logout';
                    },
                });
            }
        });
    });
</script>